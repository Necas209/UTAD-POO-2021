class Titular
{
	private:
	string nome;
	string morada;
	int numero;

	public:
	Titular();
	Titular(string _nome, string _morada, int num);
	~Titular();
	string GetNome() { return nome; }
	string GetMorada() { return morada; }
	int GetNumero() { return numero; }
	void SetNome(string _nome) { nome=_nome; }
	void SetMorada(string _morada) { morada=_morada; }
	void SetNumero(int num) { numero=num; }
	void Show();
	bool operator==(Titular T);
};


int main()
{
Titular t1("Andre Sousa", "Vila Real, PT", 12324328);
Titular t2("Vitor Filipe", "Vila Real, PT", 145544545);
Data d(17, 11, 2021);
Conta c1(t1, 600, d);
Conta c2(t2, 0, d);

cout << "Conta C1: " << c1 << endl;
cout << "Conta C2: " << c2 << endl;
c1.Levantamento(174);
c2.Deposito(174);
cout << "Conta C1: " << c1 << endl;
cout << "Conta C2: " << c2 << endl;
}

bool Titular::operator==(Titular T)
{
	return (nome == T.nome 
	&& morada == T.morada 
	&& numero == T.numero);
}

class Conta
{
	private:
	Titular titular; // Composição
	float saldo;
	Data data_abertura; // Composição

	public:
	Conta(Titular _titular, float _saldo, Data _data);
	void Deposito(int valor);
	void Levantamento(int valor);
	void SaveFile(int valor);
	bool operator==(Conta C);
	Conta operator+(Conta C);
	friend bool operator==(Conta C1, Conta C2);
	friend ostream& operator<<(ostream& os, Conta C);
	friend istream& operator>>(istream& is, Conta& C);
};

Conta& operator+(Conta C)
{
	Conta temp;
	if (*this == C)
	{
		temp.titular = titular;
		temp.saldo = saldo + C.saldo;
		if(data_ab < C.data_ab) temp.data_ab = data_ab;
		else temp.data_ab = C.data_ab;
		return temp;
	}
	return *this;
}

void Conta::SaveFile(int valor)
{
	ofstream ofs;
	ofs.open("movimentosConta.txt");
	if(ofs.is_open())
	{
		if(valor >= 0)
			Deposito(valor);
		else Levantamento(valor);
		ofs << data_abertura << ';' << titular.GetNumero() << ';' << valor << ';' << endl;
		ofs.close();	
	}
}

void Conta::Deposito(int valor)
{
	if(valor >= 0)
		saldo += valor; // saldo = saldo + valor;
}

void Conta::Levantamento(int valor)
{
	if (saldo >= valor)
		saldo -= valor;
	else
		saldo = 0; // ou não fazer nada
}

bool Conta::operator==(Conta C)
{
	return (this->titular.GetNome() == C.titular.GetNome()
	&& titular.GetMorada() == C.titular.GetMorada() && titular.GetNumero() == C.titular.GetNumero());
} 

ostream& operator<<(ostream& os, Conta C)
{
	C.titular.Show();
	os << "Cliente desde: " << C.data_abertura << endl;
	os << endl << "Saldo Atual: " << C.saldo << "€" << endl;
}

Conta::Conta(Titular _titular, float _saldo, Data _data)
{
	titular = _titular;
	saldo = _saldo;
	data_abertura = _data;
}

void Titular::Show()
{
	cout << "Nome: " << nome << endl;
	cout << "Morada: " << morada << endl;
}

Titular::Titular()
{
	nome="";
	morada="";
	numero=0;
}

Titular::Titular(string _nome, string _morada, int num)
{
	nome=_nome;
	morada=_morada;
	numero=num;
}

Titular::~Titular() {}


